*************
*** DEL 1 ***
*************

>>>
>>> What are the tasks of the subroutines in each of the files below? 
>>>

=== its.c ===
-- TCB *ITS_scheduler(TCB  *tcb) --
Huvudfunktionen för schdulern, anropas från interrupt handler (vid avbrott).
Returnerar pekare till nästa tråd som ska köras.

-- void ITS_init() --
Initierar ITS, måste anropas i huvudprogrammet innan någon annan ITS-funktion används.
Tillåter bl.a. avbrott.

-- uint ITS_create_thread( void (*entry)(void *), void *arg, uint *stack_top) --
Skapar en tråd av funktionen i första argumentet.
Argument 2 är en godtycklig datatyp som används som argument till funktionen som görs i tråden.
Argument 3 är pekare till stackens första element.
Argument 4 är prioritet 0-31.

-- void ITS_enter_critical() --
Gå in i en kritisk region. Uteslut andra trådar.
Stänger av avbrott.

-- void ITS_leave_critical() --
Lämna kritisk region.
Tillåter avbrott igen.

-- void ITS_yield() --
Lämna över processorn till nästa tråd (genom ett avbrott).

=== its_asm.s ===
-- ITS_store_state: --
Spara alla register som används av tråden.
Ladda in nästa tråds register.
Hoppa till trådens EPC.

-- ITS_intstub: --
Hopprutin som hoppar till den riktiga avbrottsrutinen.

-- ITS_init_handler: --
Flyttar hoppruntinen ovan till rätt position i minnet (0x80000080) där avbrott börjar läsas.

=== interrupt.s ===
-- init_ext_int: --

init_ext_int_loop1:
get_CAUSE:
set_CAUSE:
enable_int:
disable_int:
acknowledge_int:
do_syscall:

=== util_asm.s ===
-- get_sp: --
Returnerar stack-pointern (i v0).

-- get_gp: --
Returnerar gp.

-- get_fp: --
Returnerar fp.

-- get_k0: --
Returnerar k0.

-- set_k0: --
Sätter k0 = a0.

>>>
>>> In what file are the data structures that store thread information located? 
>>>
its_asm.s

>>>
>>> Which subroutines in which files are called during startup of the kernel? 
>>>
ITS_init
ITS_create_thread

>>>
>>> Which subroutines are called in what order when a timer interrupt occurs? 
>>>
1. ITS_scheduler
2. get_CAUSE
3. acknowledge_int / set_CAUSE

>>>
>>> What are the main tasks of each subroutine called at a timer interrupt? 
>>>
-- get_CAUSE --
Anledningen till avbrottet (läs från cause-registret).

-- set_CAUSE -- 
Sätt bitar i C0-registret (cause-registret).

-- acknowledge_int --
Loopa tills avbrottet blivt "acknowledged".

*************
*** DEL 2 ***
*************

ITS_sem time_sem;
int wait_time = 0;

// I main
ITS_sem_create(&time_sem, 0);

// I tråden som ska vänta
WaitTime(10)

// Tråd som ska låsa upp (eller i scheduler?)
ITS_wait_io_int(); // Vänta på ms avbrott
if (wait_time) {
	wait_time = wait_time - 1;
	if (wait_time == 0) {
		ITS_signal(&time_sem)
	}
}

WaitTime(n) {
	wait_time = n;
	ITS_wait(&rime_sem)
}